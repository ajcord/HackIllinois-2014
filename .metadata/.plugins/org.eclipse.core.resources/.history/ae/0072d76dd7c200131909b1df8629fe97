package com.example.hackillinois;

import java.io.IOException;
import java.io.InputStream;

import com.google.android.gms.internal.iv;

import android.app.Activity;
import android.content.Intent;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.hardware.Camera;
import android.hardware.Camera.Parameters;
import android.hardware.GeomagneticField;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.view.SurfaceHolder;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ViewSwitcher;

public class CameraActivity extends Activity implements SensorEventListener {

	private Camera mCamera;
	private CameraPreview mPreview;
	// private ViewSwitcher switcher;
	private SensorManager mSensorManager;
	private Sensor mSensor;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.camera_preview);

		// switcher = (ViewSwitcher) findViewById(R.id.viewSwitcher1);
		Button mapButton = (Button) findViewById(R.id.mapButton);
		mapButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				// Refresh.sendEmptyMessage(1);
				// MainActivity.switcher.showPrevious();
				// setContentView(R.layout.activity_main);
				mCamera.stopPreview();
				startActivity(new Intent(CameraActivity.this,
						MainActivity.class));
				finish();
			}
		});

		// Create an instance of Camera
		mCamera = getCameraInstance();

		// Create our Preview view and set it as the content of our activity.
		mPreview = new CameraPreview(this, mCamera);
		SurfaceHolder holder = mPreview.getHolder();

		FrameLayout preview = (FrameLayout) findViewById(R.id.camera_preview);
		mCamera.setDisplayOrientation(90);
		preview.addView(mPreview);

		ImageView img = (ImageView) findViewById(R.id.pointer_overlay); // or
																		// (ImageView)
																		// findViewById(R.id.myImageView);
		img.setImageResource(R.drawable.hack_illinois_arrow);
		// GeomagneticField gmf = new GeomagneticField();
		mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);
		while (true) {

		}
		// img.setRotation(180);
	}

	/** A safe way to get an instance of the Camera object. */
	public static Camera getCameraInstance() {
		Camera c = null;
		try {
			c = Camera.open(); // attempt to get a Camera instance
		} catch (Exception e) {
			// Camera is not available (in use or does not exist)
		}
		return c; // returns null if camera is unavailable
	}

	@Override
	protected void onResume() {

		sensorManager.registerListener(this, sensorAccelerometer,
				SensorManager.SENSOR_DELAY_NORMAL);
		sensorManager.registerListener(this, sensorMagneticField,
				SensorManager.SENSOR_DELAY_NORMAL);
		super.onResume();
	}

	@Override
	protected void onPause() {

		sensorManager.unregisterListener(this, sensorAccelerometer);
		sensorManager.unregisterListener(this, sensorMagneticField);
		super.onPause();
	}

	@Override
	public void onAccuracyChanged(Sensor arg0, int arg1) {
		// Auto-generated method stub
	}

	@Override
	public void onSensorChanged(SensorEvent event) {

		switch (event.sensor.getType()) {
		case Sensor.TYPE_ACCELEROMETER:
			for (int i = 0; i < 3; i++) {
				valuesAccelerometer[i] = event.values[i];
			}
			break;
		case Sensor.TYPE_MAGNETIC_FIELD:
			for (int i = 0; i < 3; i++) {
				valuesMagneticField[i] = event.values[i];
			}
			break;
		}

		boolean success = SensorManager.getRotationMatrix(matrixR, matrixI,
				valuesAccelerometer, valuesMagneticField);

		if (success) {
			SensorManager.getOrientation(matrixR, matrixValues);

			double azimuth = Math.toDegrees(matrixValues[0]);
			double pitch = Math.toDegrees(matrixValues[1]);
			double roll = Math.toDegrees(matrixValues[2]);

			readingAzimuth.setText("Azimuth: " + String.valueOf(azimuth));
			readingPitch.setText("Pitch: " + String.valueOf(pitch));
			readingRoll.setText("Roll: " + String.valueOf(roll));

			myCompass.update(matrixValues[0]);
		}

	}
}